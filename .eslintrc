{
  "env": {
    "browser": true,
    "es6": true,
    "jasmine": true,
    "jquery": true,
    "node": true
  },
  "globals": {
    "_": true,
    "angular": true,
    "browser": true, // used by the tests
    "element": true, // used by the tests
    "expect": true, // used by the tests
    "module": true, // used by the tests
    "inject": true,
    "input": true, // used by the tests
    "Highcharts": true,
    "oboe": true,
    "repeater": true, // used by the tests
    "Rollbar": true,
    "Slick": true,
    "using": true // used by the tests
  },
  "parserOptions": {
    "ecmaVersion": 6,
    "sourceType": "module"
  },
  "rules": {
    /* Legacy */
    "no-bitwise": "error", // disallow use of bitwise operators

    /* Possible Errors */
    "comma-dangle": "off", // disallow or enforce trailing commas
    "no-cond-assign": ["error", "except-parens"], // disallow assignment in conditional expressions
    "no-console": "off", // disallow use of console
    "no-constant-condition": "error", // disallow use of constant expressions in conditions
    "no-control-regex": "error", // disallow control characters in regular expressions
    "no-debugger": "error", // disallow use of debugger
    "no-dupe-args": "error", // disallow duplicate arguments in functions
    "no-dupe-keys": "error", // disallow duplicate keys when creating object literals
    "no-duplicate-case": "error", // disallow a duplicate case label
    "no-empty": "off", // disallow empty statements
    "no-empty-class": "off", // disallow the use of empty character classes in regular expressions
    "no-ex-assign": "error", // disallow assigning to the exception in a catch block
    "no-extra-boolean-cast": "off", // disallow double-negation boolean casts in a boolean context
    "no-extra-parens": "off", // disallow unnecessary parentheses
    "no-extra-semi": "error", // disallow unnecessary semicolons
    "no-func-assign": "error", // disallow overwriting functions written as function declarations
    "no-inner-declarations": "error", // disallow function or variable declarations in nested blocks
    "no-invalid-regexp": "error", // disallow invalid regular expression strings in the RegExp constructor
    "no-irregular-whitespace": "error", // disallow irregular whitespace outside of strings and comments
    "no-negated-in-lhs": "error", // disallow negation of the left operand of an in expression
    "no-obj-calls": "error", // disallow the use of object properties of the global object (Math and JSON) as functions
    "no-regex-spaces": "error", // disallow multiple spaces in a regular expression literal
    "no-reserved-keys": "off", // disallow reserved words being used as object literal keys
    "no-sparse-arrays": "error", // disallow sparse arrays
    "no-unreachable": "off", // disallow unreachable statements after a return, throw, continue, or break statement
    "use-isnan": "error", // disallow comparisons with the value NaN
    "valid-jsdoc": "off", // Ensure JSDoc comments are valid
    "valid-typeof": "error", // Ensure that the results of typeof are compared against a valid string

    /* Best Practices */
    "block-scoped-var": "off", // treat var statements as if they were block scoped
    "complexity": "off", // specify the maximum cyclomatic complexity allowed in a program
    "consistent-return": "off", // require return statements to either always or never specify values
    "curly": "error", // specify curly brace conventions for all control statements
    "default-case": "off", // require default case in switch statements
    "dot-notation": "error", // encourages use of dot notation whenever possible
    "eqeqeq": "error", // require the use of === and !==
    "guard-for-in": "error", // make sure for-in loops have an if statement
    "no-alert": "error", // disallow the use of alert, confirm, and prompt
    "no-caller": "error", // disallow use of arguments.caller or arguments.callee
    "no-div-regex": "error", // disallow division operators explicitly at beginning of regular expression
    "no-else-return": "off", // disallow else after a return in an if
    "no-empty-label": "off", // disallow use of labels for anything other then loops and switches
    "no-eq-null": "error", // disallow comparisons to null without a type-checking operator
    "no-eval": "error", // disallow use of eval()
    "no-extend-native": "warn", // disallow adding to native types
    "no-extra-bind": "warn", // disallow unnecessary function binding
    "no-fallthrough": "error", // disallow fallthrough of case statements
    "no-floating-decimal": "error", // disallow the use of leading or trailing decimal points in numeric literals
    "no-implied-eval": "error", // disallow use of eval()-like methods
    "no-iterator": "error", // disallow usage of __iterator__ property
    "no-labels": "off", // disallow use of labeled statements
    "no-lone-blocks": "error", // disallow unnecessary nested blocks
    "no-loop-func": "warn", // disallow creation of functions within loops
    "no-multi-str": "error", // disallow use of multiline strings
    "no-native-reassign": "error", // disallow reassignments of native objects
    "no-new": "error", // disallow use of new operator when not part of the assignment or comparison
    "no-new-func": "error", // disallow use of new operator for Function object
    "no-new-wrappers": "error", // disallows creating new instances of String,Number, and Boolean
    "no-octal": "error", // disallow use of octal literals
    "no-octal-escape": "error", // disallow use of octal escape sequences in string literals
    "no-param-reassign": "off", // disallow reassignment of function parameters
    "no-process-env": "off", // disallow use of process.env
    "no-proto": "error", // disallow usage of __proto__ property
    "no-redeclare": "error", // disallow declaring the same variable more then once
    "no-return-assign": "off", // disallow use of assignment in return statement
    "no-script-url": "error", // disallow use of javascript: urls
    "no-self-compare": "error", // disallow comparisons where both sides are exactly the same
    "no-sequences": "error", // disallow use of comma operator
    "no-throw-literal": "off", // restrict what can be thrown as an exception
    "no-unused-expressions": "warn", // disallow usage of expressions in statement position
    "no-void": "error", // disallow use of void operator
    "no-warning-comments": "off", // disallow usage of configurable warning terms in comments
    "no-with": "error", // disallow use of the with statement
    "radix": "warn", // require use of the second argument for parseInt()
    "vars-on-top": "off", // requires to declare all vars on top of their containing scope
    "wrap-iife": "off", // require immediate function invocation to be wrapped in parentheses
    "yoda": "error", // require or disallow Yoda conditions

    /* Strict Mode */
    "strict": "off", // controls location of Use Strict Directives.

    /* Variables */
    "no-catch-shadow": "error", // disallow the catch clause parameter name being the same as a variable in the outer scope
    "no-delete-var": "error", // disallow deletion of variables
    "no-label-var": "error", // disallow labels that share a name with a variable
    "no-shadow": "off", // disallow declaration of variables already declared in the outer scope
    "no-shadow-restricted-names": "error", // disallow shadowing of names such as arguments
    "no-undef": "error", // disallow use of undeclared variables
    "no-undef-init": "error", // disallow use of undefined when initializing variables
    "no-undefined": "off", // disallow use of undefined variable
    "no-unused-vars": "warn", // disallow declaration of variables that are not used in the code
    "no-use-before-define": "off", // disallow use of variables before they are defined

    /* Stylistic */
    "array-bracket-spacing": ["error", "never"], // require or disallow spaces inside brackets
    "brace-style": ["error", "1tbs", {"allowSingleLine": true}], // enforce one true brace style
    "camelcase": "off", // require camel case names
    "comma-spacing": ["error", {"before": false, "after": true}], // enforce spacing before and after comma
    "comma-style": ["error", "last"], // enforce one true comma style
    "computed-property-spacing": "error", // disallow or enforce spaces inside of computed properties
    "consistent-this": "off", // enforces consistent naming when capturing the current execution context
    "eol-last": "error", // enforce newline at the end of file, with no multiple empty lines
    "func-names": "off", // require function expressions to have a name
    "func-style": "off", // enforces use of function declarations or expressions
    "indent": ["error", 2, {"SwitchCase": 1}], // this option sets a specific tab width for your code
    "key-spacing": ["error", {"beforeColon": false, "afterColon": true}], // enforces spacing between keys and values in object literal properties
    "max-nested-callbacks": "warn", // specify the maximum depth callbacks can be nested
    "no-multi-spaces": "error", // disallow use of multiple spaces
    "new-cap": "off", // require a capital letter for constructors
    "new-parens": "error", // disallow the omission of parentheses when invoking a constructor with no arguments
    "newline-after-var": "error", // allow/disallow an empty newline after var statement
    "no-array-constructor": "error", // disallow use of the Array constructor
    "no-continue": "off", // disallow continue statements
    "no-inline-comments": "off", // disallow comments inline after code
    "no-lonely-if": "error", // disallow if as the only statement in an else block
    "no-mixed-spaces-and-tabs": "error", // disallow mixed spaces and tabs for indentation
    "no-multiple-empty-lines": ["error", {"max": 2}], // disallow multiple empty lines
    "no-nested-ternary": "off", // disallow nested ternary expressions
    "no-new-object": "error", // disallow use of the Object constructor
    "no-spaced-func": "error", // disallow space between function identifier and application
    "no-ternary": "off", // disallow the use of ternary operators
    "no-trailing-spaces": "error", // disallow trailing whitespace at the end of lines
    "no-underscore-dangle": "off", // disallow dangling underscores in identifiers
    "no-unneeded-ternary": "off", // disallow ternary operators when simpler alternatives exist
    "object-curly-spacing": "off", // enforce consistent spacing inside braces
    "one-var": "off", // allow just one var statement per function
    "operator-assignment": "off", // require assignment operator shorthand where possible or prohibit it entirely
    "padded-blocks": "off", // enforce padding within blocks
    "quote-props": "off", // require quotes around object literal property names
    "quotes": ["error", "single"], // specify whether double or single quotes should be used
    "semi": ["error", "always"], // require or disallow use of semicolons instead of ASI
    "semi-spacing": ["error", {"before": false, "after": true}], // enforce spacing before and after semicolons
    "sort-vars": "off", // sort variables within the same declaration block
    "keyword-spacing": "error", // enforce consistent spacing before and after keywords
    "space-before-blocks": ["error", "always"], // require or disallow space before blocks
    "space-before-function-paren": ["error", {"anonymous": "always", "named": "always", "asyncArrow": "ignore"}], // require or disallow space before function opening parenthesis
    "space-in-parens": ["error", "never"], // require or disallow spaces inside parentheses
    "space-infix-ops": "error", // require spaces around operators
    "space-unary-ops": "error", // require or disallow spaces before/after unary operators
    "spaced-comment": ["error", "always"], // requires or disallows a whitespace (space or tab) beginning a comment
    "wrap-regex": "error", // require regex literals to be wrapped in parentheses
    "func-call-spacing": ["error", "never"], // require or disallow spacing between function identifiers and their invocations
    "arrow-spacing": ["error", {"before": true, "after": true}], // require space before/after arrow function’s arrow

    /* ECMAScript 6 */
    "constructor-super": "error", // verify calls of super() in constructors
    "generator-star-spacing": "error", // enforce spacing around the * in generator functions
    "no-this-before-super": "error", // disallow use of this/super before calling super() in constructors
    "no-class-assign": "error", // disallow modifying variables of class declarations
    "no-const-assign": "error", // disallow modifying variables that are declared using const
    "no-dupe-class-members": "error", // disallow duplicate name in class members
    "no-new-symbol": "error", // disallow Symbol Constructor
    "no-var": "off", // require let or const instead of var
    "object-shorthand": "off", // require Object Literal Shorthand Syntax
    "prefer-const": "off", // suggest using const
    "require-yield": "error" // disallow generator functions that do not have yield
  }
}